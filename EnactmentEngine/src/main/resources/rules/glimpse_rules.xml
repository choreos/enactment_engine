<?xml version="1.0" encoding="UTF-8"?>
<ComplexEventRuleActionList xmlns="http://labse.isti.cnr.it/glimpse/xml/ComplexEventRule"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://labse.isti.cnr.it/glimpse/xml/ComplexEventRule ./ComplexEventRule.xsd">

<Insert RuleType="drools">

	<RuleName>Glimpse Rules @{consumer_id}</RuleName>

	<RuleBody>

		import it.cnr.isti.labsedc.glimpse.event.GlimpseBaseEventChoreos;
		import it.cnr.isti.labsedc.glimpse.manager.ResponseDispatcher;
		import java.util.regex.Matcher;
		import java.util.regex.Pattern;

		declare GlimpseBaseEventChoreos
			@role ( event )
			@timestamp ( timeStamp )
		end

		declare ResponseTimeEvent
			@role ( event )
			@expires ( 30s )
			value : float
			ip : String
			instance: String
		end

		declare CpuUserEvent
			@role ( event )
			@expires ( 2m )
			value : float
			ip : String
		end

		declare DeployStatus
			ip 		 : String
			instance : String
			service  : String
			chor     : String
		end

		<!-- 
			processed events
		-->
		declare HighReponseTime
			@role 	 ( event )
			@expires ( 5m )
			ip       : String
			service  : String
		end

		declare LowThroughput
			@role    ( event )
			@expires ( 5m)
			ip       : String
			service  : String
		end

		declare LowCpuUser
			@role    ( event )
			@expires ( 1m )
			ip       : String
			service  : String
		end

		declare HighCpuUser
			@role    ( event )
			@expires ( 1m )
			ip       : String
		end

		declare AddReplica
			@role    ( event )
			@expires ( 6m )
			service  : String
		end

		declare RemReplica
			@role    ( event )
			@expires ( 5m )
			service       : String
		end

		declare ReconfProcess
			@role ( event )
			@expires ( 6m )
			service : String
		end


		<!--===================================================================================-->

		rule "CpuUser"
		no-loop true
		salience 10
		dialect "mvel"

		when
			$aEvent : GlimpseBaseEventChoreos(
				this.isConsumed == false,
				this.isException == false,
				this.getEventName == "cpu_user"
			);
		then
			$aEvent.setConsumed(true);
			update($aEvent);
			
			Pattern p = Pattern.compile("Measured: ([0-9.]+)");
			Matcher m1 = p.matcher((String) $aEvent.getEventData());
			float f = -1;
			if (m1.find())
				f = Float.parseFloat(m1.group(0).split(": ")[1]);
			
			insert (new CpuUserEvent(f,$aEvent.getMachineIP()));

			ResponseDispatcher.LogViolation(
				"rule: " + drools.getRule().getName(),
				" from: " + (String) $aEvent.getMachineIP(),
				" meas: " + f
			);

			retract ($aEvent);
		end

		rule "ResponseTime"
		no-loop true
		salience 20
		dialect "mvel"

		when
			$aEvent : GlimpseBaseEventChoreos(
				this.isConsumed == false,
				this.isException == false,
				this.getEventName == "response_time"
			);
		then
			$aEvent.setConsumed(true);
			update($aEvent);
			float meas = Float.parseFloat((String) $aEvent.getEventData());
			
			insert (new ResponseTimeEvent(meas,
				(String) $aEvent.getMachineIP(),
				(String) $aEvent.getServiceSource())
			);
			
			ResponseDispatcher.LogViolation(
				"rule: " + drools.getRule().getName(),
				" from: " + (String) $aEvent.getServiceSource(),
				" meas: " + (String) $aEvent.getEventData()
			);

			retract ($aEvent);
		end

		rule "ChoreographyDeployStatus"
		no-loop true
		salience 500
		dialect "mvel"

		when
			$aEvent : GlimpseBaseEventChoreos(
				this.isConsumed == false,
				this.isException == false,
				this.getEventName == "deploy_status"
			);
		then
			$aEvent.setConsumed(true);
			update($aEvent);

			insert ( new DeployStatus( (String) $aEvent.getMachineIP(),
				(String) $aEvent.getEventData(),
				(String) $aEvent.getServiceSource(),
				(String) $aEvent.getChoreographySource())
			);

			ResponseDispatcher.LogViolation(
				"rule: " + drools.getRule().getName(),
				" from: " + (String) $aEvent.getServiceSource(),
				" meas: " + (String) $aEvent.getEventData()
			);

			retract($aEvent);
		end


		<!--===================================================================================
			Rules implementing relevant changes on choreographies deployment status
		====================================================================================-->
		rule "DetectLowCpuUser"
		no-loop true
		salience 200
		dialect "mvel"

		when
			$ev : CpuUserEvent();
			Number(@{min_cpu_usage} > doubleValue) from accumulate(
				CpuUserEvent( ip == $ev.ip, $val : value),
					average($val)
			);
			$depFc : DeployStatus(ip == $ev.ip);
		then
			insert (new LowCpuUser ($ev.ip, $depFc.service));

			ResponseDispatcher.LogViolation(
				"rule: " + drools.getRule().getName(),
				" from: " + $ev.ip,
				" meas: " + $ev.value
			);
		end

		rule "DetectHighCpuUser"
		no-loop true
		salience 201
		dialect "mvel"

		when
			$ev : CpuUserEvent();
			Number( doubleValue > @{max_cpu_usage} ) from accumulate ( 
				CpuUserEvent($ev.ip == ip, $val : value),
					average($val)
			);
		then
			insert (new HighCpuUser ($ev.ip));

			ResponseDispatcher.LogViolation(
				"rule: " + drools.getRule().getName(),
				" from: " + $ev.ip,
				" meas: " + $ev.value
			);
		end

		rule "DetectHighResponseTime"
		no-loop true
		salience 300
		dialect "mvel"

		when
			$ev : ResponseTimeEvent();
			Number( $eventSum : doubleValue ) from accumulate(
				$event : ResponseTimeEvent($ev.instance == instance, $ev.ip == ip),
					count($event)
			);
			Number( intValue > $eventSum * @{acceptable_percentage} ) from accumulate(
				$sEvent : ResponseTimeEvent(value > @{max_response_time}, 
					$ev.instance == instance, $ev.ip == ip),
						count($sEvent)
			);
			$depFc : DeployStatus(instance == $ev.instance);
		then
			insert ( new HighReponseTime($ev.ip, $depFc.service) );
 
			ResponseDispatcher.LogViolation(
				"rule: " + drools.getRule().getName(),
				" from: " + $depFc.service,
				" meas: " + $ev.value
			);
		end


		<!--===================================================================================
			Rules implementing actions recognized by the Enactment Engine. The rule's names
			match Classes responsible for the action:

				RemoveReplica >>> DecreaseNumberOfInstances
				AddReplica >>> IncreaseNumberOfInstances
		====================================================================================-->
		rule "RemoveReplica"
		no-loop true
		salience 210
		dialect "mvel"

		when
			$lcpu : LowCpuUser();
			not ReconfProcess(service == $lcpu.service);
			$depFc : DeployStatus(service == $lcpu.service);
		then
			insert (new ReconfProcess($lcpu.service));
			ResponseDispatcher.LogViolation(
				"rule: " + drools.getRule().getName(),
				" chor: " + (String) $depFc.chor,
				" service: " + (String) $lcpu.service
			);
			ResponseDispatcher.NotifyMeValue(drools.getRule().getName(),
				"@{consumer_id}", 
				(String) $depFc.chor, 
				(String) $lcpu.service
			);
			retract($lcpu);
		end


		rule "AddReplica"
		no-loop true
		salience 310
		dialect "mvel"

		when
			$ev : HighReponseTime();
			not ReconfProcess(service == $ev.service);
			$depFc : DeployStatus(service == $ev.service);
		then
			insert (new ReconfProcess($ev.service));
			ResponseDispatcher.LogViolation(
				"rule: " + drools.getRule().getName(),
				" chor: " + (String) $depFc.chor,
				" service: " + (String) $ev.service
			);
			ResponseDispatcher.NotifyMeValue(drools.getRule().getName(),
				"@{consumer_id}", 
				(String) $depFc.chor, 
				(String) $ev.service
			);
			retract($ev);
		end

	</RuleBody>

</Insert>

</ComplexEventRuleActionList>
