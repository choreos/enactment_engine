<?xml version="1.0" encoding="UTF-8"?>
<ComplexEventRuleActionList xmlns="http://labse.isti.cnr.it/glimpse/xml/ComplexEventRule"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://labse.isti.cnr.it/glimpse/xml/ComplexEventRule ./ComplexEventRule.xsd">

<Insert RuleType="drools">

	<RuleName>Glimpse Rules</RuleName>

	<RuleBody>

		import it.cnr.isti.labsedc.glimpse.event.GlimpseBaseEventChoreos;
		import it.cnr.isti.labsedc.glimpse.manager.ResponseDispatcher;
		import java.util.regex.Matcher;
		import java.util.regex.Pattern;

		declare GlimpseBaseEventChoreos
			@role( event )
			@timestamp( timeStamp )
		end

		declare ResponseTimeEvent
			@role(event)
			@expires (2m)
			value : float
			ip : String
			service: String
			chor: String
		end

		declare CpuUserEvent
			@role(event)
			@expires (2m)
			value : float
			ip : String
		end

		declare AddReplica
			@role(event)
			@expires( 6m )
			service : String
		end

		declare RemReplica
			@role(event)
			@expires( 5m )
			ip : String
		end

		rule "CpuUser"
		no-loop true
		salience 100
		dialect "mvel"

		when
			$aEvent : GlimpseBaseEventChoreos(
				this.isConsumed == false,
				this.isException == false,
				this.getEventName == "cpu_user"
			);
		then
			$aEvent.setConsumed(true);
			update($aEvent);
			Pattern p = Pattern.compile("Measured: ([0-9.]+)");
			Matcher m1 = p.matcher((String) $aEvent.getEventData());
			float f = -1;
			if (m1.find())
				f = Float.parseFloat(m1.group(0).split(": ")[1]);
			insert (new CpuUserEvent(f,$aEvent.getMachineIP()));
			ResponseDispatcher.LogViolation(
				"\nRule name: " + drools.getRule().getName(),
				"\nFrom: Resource Metric Aggregator",
				"\nSLA resource measurement: " + (String) $aEvent.getMachineIP() + " " + f);
		end

		rule "LowCpuUser"
		no-loop true
		salience 10
		dialect "mvel"

		when
			$ev : CpuUserEvent();
			$rs : Number(@{min_cpu_usage} > doubleValue) from accumulate(
				CpuUserEvent($ev.ip == ip, $val : value),
					average($val)
			);

			not RemReplica();
			not CpuUserEvent(value > 40);
			not ResponseTimeEvent(value > @{max_response_time})
		then
			insert(new RemReplica($ev.ip));
			ResponseDispatcher.LogViolation(drools.getRule().getName(),
				"QoS Drools Rules",
				"\nSLA QoS violation detected on: " + $ev.ip);
			ResponseDispatcher.NotifyMeValue(drools.getRule().getName(),
				"eeConsumer", (String) $ev.ip, "all");
		end

		rule "ResponseTime"
		no-loop true
		salience 20
		dialect "mvel"

		when
			$aEvent : GlimpseBaseEventChoreos(
				this.isConsumed == false,
				this.isException == false,
				this.getEventName == "response_time"
			);
		then
			$aEvent.setConsumed(true);
			update($aEvent);
			float meas = Float.parseFloat((String) $aEvent.getEventData());
			insert (new ResponseTimeEvent(meas,
				(String) $aEvent.getMachineIP(),
				(String) $aEvent.getServiceSource(),
				(String) $aEvent.getChoreographySource())
			);
			ResponseDispatcher.LogViolation(
				"\nRule name: " + drools.getRule().getName(),
				"\nFrom: Resource Metric Aggregator",
				"\nSLA resource measurement: " + (String) $aEvent.getServiceSource() + " - " + (String) $aEvent.getEventData());
			retract ($aEvent);
		end

		rule "HighResponseTime"
		no-loop true
		salience 30
		dialect "mvel"

		when
			$ev : ResponseTimeEvent();
			Number( $eventSum : doubleValue ) from accumulate(
				$event : ResponseTimeEvent($ev.service == service, $ev.ip == ip),
					count($event)
			);
			Number( intValue > $eventSum * @{acceptable_percentage} ) from accumulate(
				$sEvent : ResponseTimeEvent(value > @{max_response_time}, $ev.service == service, $ev.ip == ip),
					count($sEvent)
			);
			Number( doubleValue > @{max_cpu_usage} )
				from accumulate( CpuUserEvent($ev.ip == ip, $val : value),
					average($val)
			);

			not AddReplica();
		then
			insert(new AddReplica($ev.service));
			ResponseDispatcher.LogViolation(
				"\nRule name: " + drools.getRule().getName(),
				"\nFrom: QoS Drools Rules",
				"\nSLA QoS violation detected on: " + $ev.service);
			ResponseDispatcher.NotifyMeValue(drools.getRule().getName(),
				"eeConsumer", (String) $ev.ip, (String) $ev.service);
		end

	</RuleBody>

</Insert>

</ComplexEventRuleActionList>
