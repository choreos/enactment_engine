		
		rule "DetectLowCpuUser"
		no-loop true
		salience 200
		dialect "mvel"

		when
			$ev : CpuUserEvent();
			$depFc : DeployStatus(ip == $ev.ip);
			$sla : SLA(metric == "min_cpu_user", service_or_ip == $ev.ip);
			
			$pol : Policy(ip == $ev.ip);
			
			// for all cpu running that service: six minutes of low CPU
			forall ( $depSt : DeployStatus(service == $depFc.service)
					Number(15 > doubleValue) from accumulate( CpuUserEvent( ip == $depSt.ip, $val : value) over window:time( 6m ),
						average($val)
				);
			);
			
			not ReconfProcess(service == $depFc.service);
			not FinishedUpdate(service == $depFc.service);
			not FinishedUpdate2(service == $depFc.service);
		then
			insert ( new LowCpuUser($depFc.ip, $depFc.service, $pol.policy) );
			
			ResponseDispatcher.LogViolation(
				"rule: " + drools.getRule().getName(),
				" from: " + $ev.ip,
				" min: " + $sla.limit + ", meas: " + $ev.value
			);
		end

		rule "DetectHighCpuUser"
		no-loop true
		salience 201
		dialect "mvel"

		when
			$ev : CpuUserEvent();
			$sla : SLA(metric == "max_cpu_user", service_or_ip == $ev.ip);
			$pol : Policy(ip == $ev.ip);
			Number( doubleValue > $sla.limit ) from accumulate ( 
				CpuUserEvent($ev.ip == ip, $val : value),
					average($val)
			);
		then
			insert (new HighCpuUser($ev.ip, $pol.policy));

			ResponseDispatcher.LogViolation(
				"rule: " + drools.getRule().getName(),
				" from: " + $ev.ip,
				" meas: " + $ev.value
			);
		end
		